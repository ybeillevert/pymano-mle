# Ports ------------------------------------
API : 5000
WEB : 8000
SQL : 3306

# Deploy via Kubernetes on a Linux device-------------------------------

# Install minikube
curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
sudo install minikube-linux-amd64 /usr/local/bin/minikube

# start minikube
minikube start
minikube dashboard --url=true

# in another terminal, install kubectl
sudo curl -LO https://storage.googleapis.com/kubernetes-release/release/v1.21.0/bin/linux/amd64/kubectl
sudo chmod +x ./kubectl
sudo mv ./kubectl /usr/local/bin/kubectl
sudo kubectl version --client

# enable ingress
minikube addons enable ingress

# Change the following values in the yml files before running the commands
# - IPVM with the IP of the device that runs the projects in the deployment file
# - IPINGRESS with the IP of the ingress
kubectl create -f ./pymano-mle/k8s/pymano-mle-secret.yml
kubectl create -f ./pymano-mle/k8s/pymano-mle-deployment.yml
kubectl create -f ./pymano-mle/k8s/pymano-mle-service.yml
kubectl create -f ./pymano-mle/k8s/pymano-mle-ingress.yml

# then on local device
# change Path/To/Certificate/File.pem with the path of the SSH certificate
ssh -i "Path/To/Certificate/File.pem" -fNL 80:IPINGRESS:80 ubuntu@IPVM



# Run docker containers ---------------------------------
# First, change IPVM with the IP of the device that runs the projects
docker-compose -up



# Test on your local device -----------------------------
# On one command prompt
cd ./pymano-mle/api
flask run -p 5000
# On another command prompt
cd ./pymano-mle/web
flask run -p 8000

